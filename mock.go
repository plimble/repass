// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/plimble/repass (interfaces: Store,Interface)

package repass

import (
	mailba "github.com/plimble/mailba"
	time "time"
	gomock "code.google.com/p/gomock/gomock"
)

// Mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *_MockStoreRecorder
}

// Recorder for MockStore (not exported)
type _MockStoreRecorder struct {
	mock *MockStore
}

func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &_MockStoreRecorder{mock}
	return mock
}

func (_m *MockStore) EXPECT() *_MockStoreRecorder {
	return _m.recorder
}

func (_m *MockStore) Create(_param0 interface{}) error {
	ret := _m.ctrl.Call(_m, "Create", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockStoreRecorder) Create(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Create", arg0)
}

func (_m *MockStore) Delete(_param0 interface{}) error {
	ret := _m.ctrl.Call(_m, "Delete", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockStoreRecorder) Delete(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Delete", arg0)
}

func (_m *MockStore) Exist(_param0 interface{}) (bool, error) {
	ret := _m.ctrl.Call(_m, "Exist", _param0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockStoreRecorder) Exist(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Exist", arg0)
}

func (_m *MockStore) Get(_param0 string) (*Token, error) {
	ret := _m.ctrl.Call(_m, "Get", _param0)
	ret0, _ := ret[0].(*Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockStoreRecorder) Get(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0)
}

func (_m *MockStore) Update(_param0 interface{}, _param1 interface{}) error {
	ret := _m.ctrl.Call(_m, "Update", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockStoreRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Update", arg0, arg1)
}

func (_m *MockStore) Upsert(_param0 interface{}, _param1 interface{}) error {
	ret := _m.ctrl.Call(_m, "Upsert", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockStoreRecorder) Upsert(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Upsert", arg0, arg1)
}

// Mock of Interface interface
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *_MockInterfaceRecorder
}

// Recorder for MockInterface (not exported)
type _MockInterfaceRecorder struct {
	mock *MockInterface
}

func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &_MockInterfaceRecorder{mock}
	return mock
}

func (_m *MockInterface) EXPECT() *_MockInterfaceRecorder {
	return _m.recorder
}

func (_m *MockInterface) GetToken(_param0 string) (*Token, error) {
	ret := _m.ctrl.Call(_m, "GetToken", _param0)
	ret0, _ := ret[0].(*Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockInterfaceRecorder) GetToken(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetToken", arg0)
}

func (_m *MockInterface) SendResetPasswordMail(_param0 *mailba.Mail, _param1 time.Duration) (*Token, error) {
	ret := _m.ctrl.Call(_m, "SendResetPasswordMail", _param0, _param1)
	ret0, _ := ret[0].(*Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockInterfaceRecorder) SendResetPasswordMail(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SendResetPasswordMail", arg0, arg1)
}

func (_m *MockInterface) UseToken(_param0 string) error {
	ret := _m.ctrl.Call(_m, "UseToken", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockInterfaceRecorder) UseToken(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UseToken", arg0)
}
